pi_l_mu = mu_pi$pi_l,
pi_u_mu = mu_pi$pi_u,
width_mu = mu_pi$width,
pi_l_riemann = riemann_pi$pi_l,
pi_u_riemann = riemann_pi$pi_u,
width_riemann = riemann_pi$width)
}) |>
t()
}
xi_names <- paste0("xi",
apply(ind_mat, 1, function(x) paste0(x, collapse = ".")))
result_df <- purrr::map(mc_list, function(x) {
mc_df <- as.data.frame(x)
mc_df$group <- xi_names
mc_df
})
result_df
}
prow = 5
t_length <- param_cart[prow, "t_length"]
gamma <- param_cart[prow, "gamma"]
b <- param_cart[prow, "b"]
set.seed(seeds[prow])
# Generate two-dimensional design points
t_list <- purrr::map(seq_len(n_surface), function(i) {
t(sapply(seq_len(t_length), function(x) runif(n = 2, 0, 1))) |>
as.data.frame()
})
for(i in 1:length(t_list)) {
colnames(t_list[[i]]) <- c("t1", "t2")
}
# Transformation for the non-uniform case - b = 0 corresponds to uniform design
if(b > 0) {
t_list <- lapply(seq_along(t_list), function(id) {
apply(t_list[[id]], 1, function(x) unif_trans(x, b)) |>
t() |>
as.data.frame()
})
}
# Generate surfaces
sheets_list <- purrr::map(t_list,
~bs_kl(xout = .x, k = 12,
gamma1 = gamma, gamma2 = gamma))
ind_mat <- rbind(c(1, 1), c(2, 2), c(3, 3))
mc_list <- foreach(s_id = seq_along(sheets_list),
.packages = 'integratefda') %dopar% {
sapply(seq_len(nrow(ind_mat)), function(id) {
phi1 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t1) * pi)
phi2 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t2) * pi)
phi_big <- sapply(seq_len(ncol(phi1)),
function(x) outer(phi1[, x], phi2[, x]),
simplify = "array")
# sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
#   phi_big[ind_mat[id, 1],ind_mat[id, 2],]
sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
phi_big[ind_mat[id, 1],ind_mat[id, 2],] /
(((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t1) *
((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t2))
mc_hat <- mc_int2d(sheets_list[[s_id]]$x_obs)
mc_pi <- mc_pi2d(X = sheets_list[[s_id]]$x_obs,
X_int = mc_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000)
mu_hat <- mean(sheets_list[[s_id]]$x_obs$x, na.rm = TRUE)
mu_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = mu_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = mean)
riemann_hat <- riemann_2d(X = sheets_list[[s_id]]$x_obs)
riemann_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = riemann_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = riemann_2d)
c(mc_hat = mc_hat,
mu_hat = mu_hat,
riemann_hat = riemann_hat,
xi_true = sheets_list[[s_id]]$xi_norm[ind_mat[id, 1], ind_mat[id, 2]],
n = t_length,
gamma = gamma,
b = b,
pi_l = mc_pi$pi_l,
pi_u = mc_pi$pi_u,
width = mc_pi$width,
pi_l_mu = mu_pi$pi_l,
pi_u_mu = mu_pi$pi_u,
width_mu = mu_pi$width,
pi_l_riemann = riemann_pi$pi_l,
pi_u_riemann = riemann_pi$pi_u,
width_riemann = riemann_pi$width)
}) |>
t()
}
mu_hat <- mean(sheets_list[[s_id]]$x_obs$x, na.rm = TRUE)
s_id = 2
phi_big <- sapply(seq_len(ncol(phi1)),
function(x) outer(phi1[, x], phi2[, x]),
simplify = "array")
ind_mat <- rbind(c(1, 1), c(2, 2), c(3, 3))
phi_big <- sapply(seq_len(ncol(phi1)),
function(x) outer(phi1[, x], phi2[, x]),
simplify = "array")
k_length <- 12
t_nvec <- c(50, 100, 200)
gamma_vec <- c(1, 1.5, 2)
n_surface <- 1000
b_vec <- c(0, 1/2)
param_cart <- expand.grid(t_length = t_nvec,
gamma = gamma_vec,
b = b_vec)
unif_trans <- function(x, b) (-(1 - b/2) + sqrt((1 - b/2)^2 + 2*b*x)) / b
phi_big <- sapply(seq_len(ncol(phi1)),
function(x) outer(phi1[, x], phi2[, x]),
simplify = "array")
sapply(seq_len(nrow(ind_mat)), function(id) {
phi1 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t1) * pi)
phi2 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t2) * pi)
phi_big <- sapply(seq_len(ncol(phi1)),
function(x) outer(phi1[, x], phi2[, x]),
simplify = "array")
# sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
#   phi_big[ind_mat[id, 1],ind_mat[id, 2],]
sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
phi_big[ind_mat[id, 1],ind_mat[id, 2],] /
(((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t1) *
((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t2))
mc_hat <- mc_int2d(sheets_list[[s_id]]$x_obs)
mc_pi <- mc_pi2d(X = sheets_list[[s_id]]$x_obs,
X_int = mc_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000)
mu_hat <- mean(sheets_list[[s_id]]$x_obs$x, na.rm = TRUE)
mu_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = mu_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = mean)
riemann_hat <- riemann_2d(X = sheets_list[[s_id]]$x_obs)
riemann_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = riemann_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = riemann_2d)
c(mc_hat = mc_hat,
mu_hat = mu_hat,
riemann_hat = riemann_hat,
xi_true = sheets_list[[s_id]]$xi_norm[ind_mat[id, 1], ind_mat[id, 2]],
n = t_length,
gamma = gamma,
b = b,
pi_l = mc_pi$pi_l,
pi_u = mc_pi$pi_u,
width = mc_pi$width,
pi_l_mu = mu_pi$pi_l,
pi_u_mu = mu_pi$pi_u,
width_mu = mu_pi$width,
pi_l_riemann = riemann_pi$pi_l,
pi_u_riemann = riemann_pi$pi_u,
width_riemann = riemann_pi$width)
}) |>
t()
id = 2
phi1 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t1) * pi)
phi2 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t2) * pi)
phi_big <- sapply(seq_len(ncol(phi1)),
function(x) outer(phi1[, x], phi2[, x]),
simplify = "array")
# sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
#   phi_big[ind_mat[id, 1],ind_mat[id, 2],]
sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
phi_big[ind_mat[id, 1],ind_mat[id, 2],] /
(((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t1) *
((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t2))
mc_hat <- mc_int2d(sheets_list[[s_id]]$x_obs)
mc_pi <- mc_pi2d(X = sheets_list[[s_id]]$x_obs,
X_int = mc_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000)
mu_hat <- mean(sheets_list[[s_id]]$x_obs$x, na.rm = TRUE)
mu_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = mu_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = mean)
riemann_hat <- ri
riemann_hat <- riemann_2d(X = sheets_list[[s_id]]$x_obs)
riemann_hat
yi
s_id
mc_pi <- mc_pi2d(X = sheets_list[[s_id]]$x_obs,
X_int = mc_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 50)
mu_hat <- mean(sheets_list[[s_id]]$x_obs$x, na.rm = TRUE)
mu_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = mu_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = mean)
riemann_hat <- riemann_2d(X = sheets_list[[s_id]]$x_obs)
riemann_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = riemann_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = riemann_2d)
riemann_hat
mc_pi <- mc_pi2d(X = sheets_list[[s_id]]$x_obs,
X_int = mc_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000)
sheets_list[[s_id]]$xi_norm[ind_mat[id, 1]
sheets_list[[s_id]]$xi_norm[ind_mat[id, 1], ind_mat[id, 2]]
mc_pi$X_int
mu_pi$pi_l
mu_pi$pi_u
c(mc_hat = mc_hat,
mu_hat = mu_hat,
riemann_hat = riemann_hat,
xi_true = sheets_list[[s_id]]$xi_norm[ind_mat[id, 1], ind_mat[id, 2]],
n = t_length,
gamma = gamma,
b = b,
pi_l = mc_pi$pi_l,
pi_u = mc_pi$pi_u,
width = mc_pi$width,
pi_l_mu = mu_pi$pi_l,
pi_u_mu = mu_pi$pi_u,
width_mu = mu_pi$width,
pi_l_riemann = riemann_pi$pi_l,
pi_u_riemann = riemann_pi$pi_u,
width_riemann = riemann_pi$width)
}) |>
library(argoFloats)
index1 <- getIndex()
index2 <- subset(index1, ID="6900388")
index2 <- subset(index1, ID="6900388")
?subset
index2 <- argoFloats::subset(index1, ID="6900388")
index2 <- argoFloats::subset(x = index1, ID="6900388")
index1 <- getIndex()
getwd()
getIndex()
?getIndex()
index1 <- getIndex(filename = "/data/argo")
setwd("/Users/swang/Library/CloudStorage/Dropbox/integratefda/data/argo")
index1 <- getIndex()
getwd()
setwd("/Users/swang/Library/CloudStorage/Dropbox/integratefda")
?getIndex
index1 <- getIndex(destdir = "/Users/swang/Library/CloudStorage/Dropbox/integratefda/data/argo")
index2 <- argoFloats::subset(x = index1, ID="6900388")
plot(index2, bathymetry=TRUE)
plot(argos,which="TS",col=colBasin)
?subset
plot(index2,which="map")
# Subsetting by circle
aiCircle <- subset(index1, circle=list(longitude=-77.5, latitude=27.5, radius=50))
# Subsetting by polygon
lonPoly <- c(-76.5, -76.0, -75.5)
latPoly <- c(25.5, 26.5, 25.5)
aiPoly <- subset(index1, polygon=list(longitude=lonPoly, latitude=latPoly))
# Plotting the subsets together
CP <- merge(aiCircle, aiPoly)
plot(CP, bathymetry=TRUE)
plot(index2, bathymetry=TRUE)
# Subset by circle
index1 <- subset(ai, circle=list(longitude=-77.5, latitude=27.5, radius=50))
# Subset by circle
ai <- subset(index1, circle=list(longitude=-77.5, latitude=27.5, radius=50))
# Subset by polygon
lonPoly <- c(-76.5, -76.0, -75.5)
latPoly <- c(25.5, 26.5, 25.5)
index2 <- subset(ai, polygon=list(longitude=lonPoly, latitude=latPoly))
plot(CP, bathymetry=TRUE)
citation("FDAdapt")
citation("direg")
library(integratefda)
library(parallel)
library(tictoc)
library(parallel)
library(doParallel)
library(here)
k_length <- 12
t_nvec <- c(50, 100, 200)
gamma_vec <- c(1, 1.5, 2)
n_surface <- 1000
#b_vec <- c(0, 1/2)
param_cart <- expand.grid(t_length = t_nvec,
gamma = gamma_vec)
#b = b_vec)
#unif_trans <- function(x, b) (-(1 - b/2) + sqrt((1 - b/2)^2 + 2*b*x)) / b
set.seed(1234)
seeds <- sample.int(n = 10000, size = nrow(param_cart))
n_cores <- detectCores() - 1
cl <- makeCluster(spec = n_cores)
registerDoParallel(cl)
tic()
result_list <- foreach(prow = 1:nrow(param_cart),
.packages = 'integratefda') %do% {
t_length <- param_cart[prow, "t_length"]
gamma <- param_cart[prow, "gamma"]
#b <- param_cart[prow, "b"]
set.seed(seeds[prow])
# Generate two-dimensional design points
t_list <- purrr::map(seq_len(n_surface), function(i) {
t(sapply(seq_len(t_length), function(x) runif(n = 2, 0, 1))) |>
as.data.frame()
})
for(i in 1:length(t_list)) {
colnames(t_list[[i]]) <- c("t1", "t2")
}
# Transformation for the non-uniform case - b = 0 corresponds to uniform design
# if(b > 0) {
#   t_list <- lapply(seq_along(t_list), function(id) {
#     apply(t_list[[id]], 1, function(x) unif_trans(x, b)) |>
#       t() |>
#       as.data.frame()
#   })
# }
# Generate surfaces
sheets_list <- purrr::map(t_list,
~bs_kl(xout = .x, k = 12,
gamma1 = gamma, gamma2 = gamma))
ind_mat <- rbind(c(1, 1), c(2, 2), c(3, 3))
mc_list <- foreach(s_id = seq_along(sheets_list),
.packages = 'integratefda') %dopar% {
sapply(seq_len(nrow(ind_mat)), function(id) {
phi1 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t1) * pi)
phi2 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t2) * pi)
phi_big <- sapply(seq_len(ncol(phi1)),
function(x) outer(phi1[, x], phi2[, x]),
simplify = "array")
# sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
#   phi_big[ind_mat[id, 1],ind_mat[id, 2],]
sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
phi_big[ind_mat[id, 1],ind_mat[id, 2],] /
(((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t1) *
((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t2))
mc_hat <- mc_int2d(sheets_list[[s_id]]$x_obs)
mc_pi <- mc_pi2d(X = sheets_list[[s_id]]$x_obs,
X_int = mc_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000)
mu_hat <- mean(sheets_list[[s_id]]$x_obs$x, na.rm = TRUE)
mu_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = mu_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = mean)
riemann_hat <- riemann_2d(X = sheets_list[[s_id]]$x_obs)
riemann_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = riemann_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = riemann_2d)
c(mc_hat = mc_hat,
mu_hat = mu_hat,
riemann_hat = riemann_hat,
xi_true = sheets_list[[s_id]]$xi_norm[ind_mat[id, 1], ind_mat[id, 2]],
n = t_length,
gamma = gamma,
#b = b,
pi_l = mc_pi$pi_l,
pi_u = mc_pi$pi_u,
width = mc_pi$width,
pi_l_mu = mu_pi$pi_l,
pi_u_mu = mu_pi$pi_u,
width_mu = mu_pi$width,
pi_l_riemann = riemann_pi$pi_l,
pi_u_riemann = riemann_pi$pi_u,
width_riemann = riemann_pi$width)
}) |>
t()
}
xi_names <- paste0("xi",
apply(ind_mat, 1, function(x) paste0(x, collapse = ".")))
result_df <- purrr::map(mc_list, function(x) {
mc_df <- as.data.frame(x)
mc_df$group <- xi_names
mc_df
})
result_df
}
stopCluster(cl)
library(integratefda)
library(parallel)
library(tictoc)
library(parallel)
library(doParallel)
library(here)
k_length <- 12
t_nvec <- c(50, 100, 200)
gamma_vec <- c(1, 1.5, 2)
n_surface <- 1000
#b_vec <- c(0, 1/2)
param_cart <- expand.grid(t_length = t_nvec,
gamma = gamma_vec)
#b = b_vec)
#unif_trans <- function(x, b) (-(1 - b/2) + sqrt((1 - b/2)^2 + 2*b*x)) / b
set.seed(1234)
seeds <- sample.int(n = 10000, size = nrow(param_cart))
n_cores <- detectCores() - 1
cl <- makeCluster(spec = n_cores)
registerDoParallel(cl)
tic()
result_list <- foreach(prow = 1:nrow(param_cart),
.packages = 'integratefda') %do% {
t_length <- param_cart[prow, "t_length"]
gamma <- param_cart[prow, "gamma"]
#b <- param_cart[prow, "b"]
set.seed(seeds[prow])
# Generate two-dimensional design points
t_list <- purrr::map(seq_len(n_surface), function(i) {
t(sapply(seq_len(t_length), function(x) runif(n = 2, 0, 1))) |>
as.data.frame()
})
for(i in 1:length(t_list)) {
colnames(t_list[[i]]) <- c("t1", "t2")
}
# Transformation for the non-uniform case - b = 0 corresponds to uniform design
# if(b > 0) {
#   t_list <- lapply(seq_along(t_list), function(id) {
#     apply(t_list[[id]], 1, function(x) unif_trans(x, b)) |>
#       t() |>
#       as.data.frame()
#   })
# }
# Generate surfaces
sheets_list <- purrr::map(t_list,
~bs_kl(xout = .x, k = 12,
gamma1 = gamma, gamma2 = gamma))
ind_mat <- rbind(c(1, 1), c(2, 2), c(3, 3))
mc_list <- foreach(s_id = seq_along(sheets_list),
.packages = 'integratefda') %dopar% {
sapply(seq_len(nrow(ind_mat)), function(id) {
phi1 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t1) * pi)
phi2 <- sqrt(2) * cos(outer(seq_len(k_length), sheets_list[[s_id]]$x_obs$t2) * pi)
phi_big <- sapply(seq_len(ncol(phi1)),
function(x) outer(phi1[, x], phi2[, x]),
simplify = "array")
# sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
#   phi_big[ind_mat[id, 1],ind_mat[id, 2],]
# sheets_list[[s_id]]$x_obs$x <- sheets_list[[s_id]]$x_obs$x *
#   phi_big[ind_mat[id, 1],ind_mat[id, 2],] /
#   (((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t1) *
#      ((1 - b/2) + b * sheets_list[[s_id]]$x_obs$t2))
mc_hat <- mc_int2d(sheets_list[[s_id]]$x_obs)
mc_pi <- mc_pi2d(X = sheets_list[[s_id]]$x_obs,
X_int = mc_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000)
mu_hat <- mean(sheets_list[[s_id]]$x_obs$x, na.rm = TRUE)
mu_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = mu_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = mean)
riemann_hat <- riemann_2d(X = sheets_list[[s_id]]$x_obs)
riemann_pi <- pi_subsam2d(X = sheets_list[[s_id]]$x_obs,
X_int = riemann_hat,
eps = 0.05,
s = min(gamma - 0.5, 1),
b_out = 1000,
int_fun = riemann_2d)
c(mc_hat = mc_hat,
mu_hat = mu_hat,
riemann_hat = riemann_hat,
xi_true = sheets_list[[s_id]]$xi_norm[ind_mat[id, 1], ind_mat[id, 2]],
n = t_length,
gamma = gamma,
#b = b,
pi_l = mc_pi$pi_l,
pi_u = mc_pi$pi_u,
width = mc_pi$width,
pi_l_mu = mu_pi$pi_l,
pi_u_mu = mu_pi$pi_u,
width_mu = mu_pi$width,
pi_l_riemann = riemann_pi$pi_l,
pi_u_riemann = riemann_pi$pi_u,
width_riemann = riemann_pi$width)
}) |>
t()
}
xi_names <- paste0("xi",
apply(ind_mat, 1, function(x) paste0(x, collapse = ".")))
result_df <- purrr::map(mc_list, function(x) {
mc_df <- as.data.frame(x)
mc_df$group <- xi_names
mc_df
})
result_df
}
toc()
stopCluster(cl)
