as.data.frame()
})
for(i in 1:length(t_list)) {
colnames(t_list[[i]]) <- c("t1", "t2")
}
t_list
xout = t_list[[1]]
k = 12
nu
nu1 = nu
nu2 = nu
phi1 <- sqrt(2) * cos(outer(seq_len(k), xout$t1) * pi) / (seq_len(k) * pi)^nu1
phi2 <- sqrt(2) * cos(outer(seq_len(k), xout$t2) * pi) / (seq_len(k) * pi)^nu2
phi1
phi2
dim(phi1)
dim(phi2)
xi <- array(data = rnorm(n = nrow(phi1)^2),
dim = c(nrow(phi1), nrow(phi1)))
xik
xi
X_obs <- sapply(seq_len(ncol(phi1)), function(v) {
crossprod(phi1[, v], xi) %*% phi2[, v]
})
dim(xi)
dim(outer((seq_len(k) * pi)^nu1, (seq_len(k) * pi)^nu2))
outer((seq_len(k) * pi)^nu1, (seq_len(k) * pi)^nu2)
View(outer((seq_len(k) * pi)^nu1, (seq_len(k) * pi)^nu2))
View(xi)
View(xi / outer((seq_len(k) * pi)^nu1, (seq_len(k) * pi)^nu2))
-1.28/9
0.35/59
1.78/59
library(mcscores)
library(parallel)
library(tictoc)
k_length <- 12
t_nvec <- c(50, 100, 200)
nu_vec <- c(1, 1.5, 2)
n_surface <- 500
param_cart <- expand.grid(t_length = t_nvec,
nu = nu_vec)
seeds <- sample.int(n = 10000, size = nrow(param_cart))
tic()
result_list <- mclapply(seq_len(nrow(param_cart)), function(prow) {
t_length <- param_cart[prow, "t_length"]
nu <- param_cart[prow, "nu"]
set.seed(seeds[prow])
# Generate two-dimensional design points
t_list <- purrr::map(seq_len(n_surface), function(i) {
t(sapply(seq_len(t_length), function(x) runif(n = 2, 0, 1))) |>
as.data.frame()
})
for(i in 1:length(t_list)) {
colnames(t_list[[i]]) <- c("t1", "t2")
}
# Generate surfaces
sheets_list <- purrr::map(t_list, ~bs_kl(xout = .x, k = 12, nu1 = nu, nu2 = nu))
# Construct basis functions
phi1_list <- purrr::map(sheets_list,
~sqrt(2) * cos(outer(seq_len(k_length),
.x$x_obs$t1) * pi))
phi2_list <- purrr::map(sheets_list,
~sqrt(2) * cos(outer(seq_len(k_length),
.x$x_obs$t2) * pi))
ind_mat <- rbind(c(1, 1), c(1, 6), c(6, 1), c(6, 6), c(12, 12), c(1, 12))
phi_big <- purrr::map2(phi1_list, phi2_list,
~sapply(seq_len(ncol(.x)), function(z) {
outer(.x[, z], .y[, z])},
simplify = "array"))
mc_list <- lapply(seq_len(nrow(ind_mat)), function(id) {
# Construct integrands for scores
varphi_list <- purrr::map2(sheets_list, phi_big,
~.x$x_obs$x * .y[ind_mat[id, 1],ind_mat[id, 2],]
)
varphi_list2 <- purrr::map2(sheets_list, varphi_list, function(x, y) {
x$x_obs$x <- y
return(x)
})
# Apply methods and save results
data.frame(mc_hat = mc_int2d(varphi_list2),
mu_hat = purrr::map_dbl(varphi_list2, ~mean(.x$x_obs$x)),
xi_true = purrr::map_dbl(sheets_list,
~.x$xi[ind_mat[id, 1],ind_mat[id, 2]]),
group = paste("xi", paste0(ind_mat[id, ], collapse = "."),
sep = "_"),
n = t_length,
nu = nu
)
})
do.call('rbind', mc_list)
}, mc.cores = detectCores() - 1)
toc()
library(tibble)
library(dplyr)
library(tidyr)
library(ggplot2)
result_combined <- as_tibble(do.call('rbind', result_list)) |>
mutate(mc = (mc_hat - xi_true) ,
mu = (mu_hat - xi_true)) |>
pivot_longer(cols = mc:mu,
names_to = "method",
values_to = "error")
result_combined |>
filter(nu == 1, n == 100) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
result_combined |>
filter(nu == 2, n == 100) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
result_combined |>
filter(nu == 1.5, n == 100) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
result_combined |>
filter(nu == 1.5, n == 200) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
result_combined |>
filter(nu == 2, n == 200) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
result_combined |>
filter(nu == 2, n == 50) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
result_combined |>
filter(nu == 2, n == 100) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
result_combined |>
filter(nu == 2, n == 200) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
result_combined |>
filter(nu == 1, n == 200) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
result_combined |>
filter(nu == 1, n == 50) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot()
param_cart
box_list <- lapply(seq_len(nrow(param_cart)), function(k) {
result_combined |>
filter(nu == param_cart[k, "nu"], n == param_cart[k, "t_length"]) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot() +
xlab("Scores") +
ylab("Difference") +
ggtitle("Boxplots Comparisons")
})
box_list
paste0("Boxplots Comparisons (M = ",
param_cart[k, "t_length"],
)
paste0("Boxplots Comparisons (M = ",
param_cart[1, "t_length"],
)
paste0("Boxplots Comparisons (M = ",
param_cart[1, "t_length"],
)paste0("Boxplots Comparisons (M = ",
paste0("Boxplots Comparisons (M = ",
param_cart[k, "t_length"])
paste0("Boxplots Comparisons (M = ",
param_cart[1, "t_length"])
paste0("Boxplots Comparisons (M = ",
param_cart[k, "t_length"], ", Nu = ",
param_cart[k, "nu"])
paste0("Boxplots Comparisons (M = ",
param_cart[1, "t_length"], ", Nu = ",
param_cart[1, "nu"])
paste0("Boxplots Comparisons (M = ",
param_cart[1, "t_length"], ", Nu = ",
param_cart[1, "nu"], ")")
box_list <- lapply(seq_len(nrow(param_cart)), function(k) {
result_combined |>
filter(nu == param_cart[k, "nu"], n == param_cart[k, "t_length"]) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot() +
xlab("Scores") +
ylab("Difference") +
ggtitle(paste0("Boxplots Comparisons (M = ",
param_cart[k, "t_length"], ", Nu = ",
param_cart[k, "nu"], ")")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
})
box_list[[1]]
wrap_plots(box_list, nrow = 3, ncol = 3)
library(patchwork)
wrap_plots(box_list, nrow = 3, ncol = 3)
wrap_plots(box_list, nrow = 3, ncol = 3) +
plot_layout(guides = "collect")
box_list <- lapply(seq_len(nrow(param_cart)), function(k) {
result_combined |>
filter(nu == param_cart[k, "nu"], n == param_cart[k, "t_length"]) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot() +
xlab("Scores") +
ylab("Difference") +
ggtitle(paste0("M = ",
param_cart[k, "t_length"], ", Nu = ",
param_cart[k, "nu"])) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
})
library(patchwork)
wrap_plots(box_list, nrow = 3, ncol = 3) +
plot_layout(guides = "collect")
wrap_plots(box_list[1:3], nrow = 1, ncol = 3) +
plot_layout(guides = "collect")
wrap_plots(box_list[4:6], nrow = 1, ncol = 3) +
plot_layout(guides = "collect")
wrap_plots(box_list, nrow = 1, ncol = 3) +
plot_layout(guides = "collect")
wrap_plots(box_list, nrow = 3, ncol = 3) +
plot_layout(guides = "collect")
wrap_plots(box_list[6:9], nrow = 1, ncol = 3) +
plot_layout(guides = "collect")
wrap_plots(box_list[7:9], nrow = 1, ncol = 3) +
plot_layout(guides = "collect")
tic()
result_list <- mclapply(seq_len(nrow(param_cart)), function(prow) {
t_length <- param_cart[prow, "t_length"]
nu <- param_cart[prow, "nu"]
set.seed(seeds[prow])
# Generate two-dimensional design points
t_list <- purrr::map(seq_len(n_surface), function(i) {
t(sapply(seq_len(t_length), function(x) runif(n = 2, 0, 1))) |>
as.data.frame()
})
for(i in 1:length(t_list)) {
colnames(t_list[[i]]) <- c("t1", "t2")
}
# Generate surfaces
sheets_list <- purrr::map(t_list, ~bs_kl(xout = .x, k = 12, nu1 = nu, nu2 = nu))
# Construct basis functions
phi1_list <- purrr::map(sheets_list,
~sqrt(2) * cos(outer(seq_len(k_length),
.x$x_obs$t1) * pi))
phi2_list <- purrr::map(sheets_list,
~sqrt(2) * cos(outer(seq_len(k_length),
.x$x_obs$t2) * pi))
ind_mat <- rbind(c(1, 1), c(1, 2), c(2, 1), c(6, 6), c(12, 12), c(1, 12))
phi_big <- purrr::map2(phi1_list, phi2_list,
~sapply(seq_len(ncol(.x)), function(z) {
outer(.x[, z], .y[, z])},
simplify = "array"))
mc_list <- lapply(seq_len(nrow(ind_mat)), function(id) {
# Construct integrands for scores
varphi_list <- purrr::map2(sheets_list, phi_big,
~.x$x_obs$x * .y[ind_mat[id, 1],ind_mat[id, 2],]
)
varphi_list2 <- purrr::map2(sheets_list, varphi_list, function(x, y) {
x$x_obs$x <- y
return(x)
})
# Apply methods and save results
data.frame(mc_hat = mc_int2d(varphi_list2),
mu_hat = purrr::map_dbl(varphi_list2, ~mean(.x$x_obs$x)),
xi_true = purrr::map_dbl(sheets_list,
~.x$xi[ind_mat[id, 1],ind_mat[id, 2]]),
group = paste("xi", paste0(ind_mat[id, ], collapse = "."),
sep = "_"),
n = t_length,
nu = nu
)
})
do.call('rbind', mc_list)
}, mc.cores = detectCores() - 1)
toc()
# analysis of results ========================================================
library(tibble)
library(dplyr)
library(tidyr)
library(ggplot2)
result_combined <- as_tibble(do.call('rbind', result_list)) |>
mutate(mc = (mc_hat - xi_true) ,
mu = (mu_hat - xi_true)) |>
pivot_longer(cols = mc:mu,
names_to = "method",
values_to = "error")
box_list <- lapply(seq_len(nrow(param_cart)), function(k) {
result_combined |>
filter(nu == param_cart[k, "nu"], n == param_cart[k, "t_length"]) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot() +
xlab("Scores") +
ylab("Difference") +
ggtitle(paste0("M = ",
param_cart[k, "t_length"], ", Nu = ",
param_cart[k, "nu"])) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
})
library(patchwork)
wrap_plots(box_list, nrow = 3, ncol = 3) +
plot_layout(guides = "collect")
prow
prow = 1
t_length <- param_cart[prow, "t_length"]
nu <- param_cart[prow, "nu"]
set.seed(seeds[prow])
# Generate two-dimensional design points
t_list <- purrr::map(seq_len(n_surface), function(i) {
t(sapply(seq_len(t_length), function(x) runif(n = 2, 0, 1))) |>
as.data.frame()
})
for(i in 1:length(t_list)) {
colnames(t_list[[i]]) <- c("t1", "t2")
}
# Generate surfaces
sheets_list <- purrr::map(t_list, ~bs_kl(xout = .x, k = 12, nu1 = nu, nu2 = nu))
sheets_list
phi1_list <- purrr::map(sheets_list,
~sqrt(2) * cos(outer(seq_len(k_length),
.x$x_obs$t1) * pi))
phi2_list <- purrr::map(sheets_list,
~sqrt(2) * cos(outer(seq_len(k_length),
.x$x_obs$t2) * pi))
ind_mat <- rbind(c(1, 1), c(1, 2), c(2, 1), c(6, 6), c(12, 12), c(1, 12))
phi_big <- purrr::map2(phi1_list, phi2_list,
~sapply(seq_len(ncol(.x)), function(z) {
outer(.x[, z], .y[, z])},
simplify = "array"))
id = 1
varphi_list <- purrr::map2(sheets_list, phi_big,
~.x$x_obs$x * .y[ind_mat[id, 1],ind_mat[id, 2],]
)
varphi_list2 <- purrr::map2(sheets_list, varphi_list, function(x, y) {
x$x_obs$x <- y
return(x)
})
varphi_list2
varphi_list2[[1]]
varphi = varphi_list2
varphi
varphi_int
mc_int2d(varphi_list2)
varphi_int = mc_int2d(varphi_list2)
varphi[[1]]
varphi_int
length(varphi)
eps = 0.05
ind_mat
prow
param_cart[prow, ]
s
s = 0.5
s
b_out
b_out = 200
cdf
varphi
varphi[[1]]$x_obs
varphi[[1]]$x_obs
varphi[[1]]$x_obs |> nrow()
prow
prow = 1
t_length <- param_cart[prow, "t_length"]
nu <- param_cart[prow, "nu"]
set.seed(seeds[prow])
# Generate two-dimensional design points
t_list <- purrr::map(seq_len(n_surface), function(i) {
t(sapply(seq_len(t_length), function(x) runif(n = 2, 0, 1))) |>
as.data.frame()
})
for(i in 1:length(t_list)) {
colnames(t_list[[i]]) <- c("t1", "t2")
}
# Generate surfaces
sheets_list <- purrr::map(t_list, ~bs_kl(xout = .x, k = 12, nu1 = nu, nu2 = nu))
nu1
nu
nu1
1 / outer(seq_len(3)^(2*nu) , seq_len(3)^(2*nu))
sum(1 / outer(seq_len(3)^(2*nu) , seq_len(3)^(2*nu))
sum(1 / outer(seq_len(3)^(2*nu) , seq_len(3)^(2*nu)))
1 / (outer(seq_len(3)^(2*nu) , seq_len(3)^(2*nu)))
sum(1 / (outer(seq_len(3)^(2*nu) , seq_len(3)^(2*nu))))
sum(1 / (outer(seq_len(3)^(2*nu) , seq_len(3)^(2*nu)))) /
sum(1 / (outer(seq_len(200)^(2*nu) , seq_len(200)^(2*nu))))
nu
nu = 2
sum(1 / (outer(seq_len(3)^(2*nu) , seq_len(3)^(2*nu)))) /
sum(1 / (outer(seq_len(200)^(2*nu) , seq_len(200)^(2*nu))))
nu = 1.5
sum(1 / (outer(seq_len(3)^(2*nu) , seq_len(3)^(2*nu)))) /
sum(1 / (outer(seq_len(200)^(2*nu) , seq_len(200)^(2*nu))))
bs_kl;
result_combined <- as_tibble(do.call('rbind', result_list)) |>
mutate(mc = (mc_hat - xi_true) ,
mu = (mu_hat - xi_true)) |>
mutate(ratio = mc / mu) |>
box_list <- lapply(seq_len(nrow(param_cart)), function(k) {
result_combined |>
filter(nu == param_cart[k, "nu"], n == param_cart[k, "t_length"]) |>
ggplot(aes(x = group, y = error, fill = method)) +
geom_boxplot() +
xlab("Scores") +
ylab("Difference") +
ggtitle(paste0("M = ",
param_cart[k, "t_length"], ", Nu = ",
param_cart[k, "nu"])) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
})
result_combined <- as_tibble(do.call('rbind', result_list)) |>
mutate(mc = (mc_hat - xi_true) ,
mu = (mu_hat - xi_true)) |>
mutate(ratio = mc / mu)
result_combined
box_list <- lapply(seq_len(nrow(param_cart)), function(k) {
result_combined |>
filter(nu == param_cart[k, "nu"], n == param_cart[k, "t_length"]) |>
ggplot(aes(x = group, y = ratio, fill = method)) +
geom_boxplot() +
xlab("Scores") +
ylab("Difference") +
ggtitle(paste0("M = ",
param_cart[k, "t_length"], ", Nu = ",
param_cart[k, "nu"])) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
})
box_list
result_combined
box_list <- lapply(seq_len(nrow(param_cart)), function(k) {
result_combined |>
filter(nu == param_cart[k, "nu"], n == param_cart[k, "t_length"]) |>
ggplot(aes(x = group, y = ratio)) +
geom_boxplot() +
xlab("Scores") +
ylab("Difference") +
ggtitle(paste0("M = ",
param_cart[k, "t_length"], ", Nu = ",
param_cart[k, "nu"])) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
})
wrap_plots(box_list, nrow = 3, ncol = 3) +
plot_layout(guides = "collect")
result_combined <- as_tibble(do.call('rbind', result_list)) |>
mutate(mc = (mc_hat - xi_true) ,
mu = (mu_hat - xi_true)) |>
mutate(ratio = log(abs(mc / mu)))
box_list <- lapply(seq_len(nrow(param_cart)), function(k) {
result_combined |>
filter(nu == param_cart[k, "nu"], n == param_cart[k, "t_length"]) |>
ggplot(aes(x = group, y = ratio)) +
geom_boxplot() +
xlab("Scores") +
ylab("Difference") +
ggtitle(paste0("M = ",
param_cart[k, "t_length"], ", Nu = ",
param_cart[k, "nu"])) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
})
library(patchwork)
wrap_plots(box_list, nrow = 3, ncol = 3) +
plot_layout(guides = "collect")
result_combined <- as_tibble(do.call('rbind', result_list)) |>
mutate(mc = (mc_hat - xi_true) ,
mu = (mu_hat - xi_true))
result_combined
result_combined <- as_tibble(do.call('rbind', result_list)) |>
mutate(mc = abs(mc_hat - xi_true) ,
mu = abs(mu_hat - xi_true))
param_cart
result_cobined
result_combined
result_combined |>
filter(n == 200)
result_combined |>
filter(n == 200) |>
mutate(ratio = mc / mu)
result_combined |>
filter(n == 200) |>
mutate(ratio = mc)
result_combined |>
filter(n == 200)
result_combined |>
filter(n == 200, nu == 1)
mc_ref <- result_combined |>
filter(n == 200, nu == 1)
mc_1 <- result_combined |>
filter(n == 200, nu == 1.5)
mc_2 <- result_combined |>
filter(n == 200, nu == 2)
mc_ref
mc_ref <- result_combined |>
filter(n == 200, nu == 1) |>
select(mc)
mc_1 <- result_combined |>
filter(n == 200, nu == 1.5) |>
select(mc)
mc_2 <- result_combined |>
filter(n == 200, nu == 2) |>
select(mc)
mc_ref
par(mfrow = c(1, 2))
boxplot(mc_ref$mc / mc_1$mc)
par(mfrow = c(1, 2))
boxplot(log(mc_ref$mc / mc_1$mc))
boxplot(log(mc_ref$mc / mc_2$mc))
boxplot(log(mc_1$mc / mc_ref$mc) - log(mc_2$mc / mc_ref$mc))
par(mfrow = c(1, 2))
boxplot(log(mc_1$mc / mc_ref$mc))
boxplot(log(mc_2$mc / mc_ref$mc))
