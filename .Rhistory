sigma_grid = Reduce('+', purrr::map(noise, ~.x^2)) / length(noise)
sigma_emp = mean(sigma_grid)
sigma_emp
sigma_emp = sqrt(mean(sigma_grid))
sigma_emp
bm_kl_rd
library(mcscores)
library(parallel)
library(tictoc)
library(reshape2)
library(tidyr)
library(ggplot2)
n_basis <- 200
lambda_pow <- 2
x_length <- 51
ci_level <- 0.95
xi_cdf <- rt
#xi_cdf <- rchisq
#xi_cdf <- rnorm
points_dist <- runif
#cdf <- function(x) a/3*(x - 0.5)^3 + b*x + a/24
cdf <- identity
rout <- 500
a <- 3
b <- 1 - a/12
shift <- 0
sigma <- 0.1
x_cov <- seq(0, 1, length.out = 201)
# Generate large sample of curves to construct "true" covariance matrix
cov_pace <- purrr::map(seq_len(1000),
~bm_kl_rd(k = n_basis, x = x_cov, lambda_rate = lambda_pow,
xi_dist = xi_cdf,
df = 4,
norm_constant = 0, norm_factor = sqrt(1/2))) |>
purrr::map(~tcrossprod(.x$x)) |>
(\(x) Reduce('+', x) / length(x))()
image(cov_pcae)
image(cov_pace)
tic()
result <- mclapply(seq_len(rout), function(rep) {
x_obs <- sort(points_dist(n = x_length))
x_list <- bm_kl_rd(k = n_basis, x = x_obs, lambda_rate = lambda_pow,
norm_constant = 0, norm_factor = sqrt(1/2), xi_dist = xi_cdf,
df = 4)
lag <- 1
eta <- rnorm(length(x_list$x) + lag)
em <- RcppRoll::roll_sum(x = eta, n = lag + 1) / sqrt(lag + 1)
#noise <- x_list$x * sigma * em
noise <- sigma * em
y_list <- list(t = x_obs,
x = x_list$x,
y = x_list$x + noise + shift)
lambda <- ((seq_len(n_basis) - 0.5) * pi)^(-lambda_pow)
mu_list <- list(t = x_obs,
x = rep(0, length(x_obs)))
psi_list <- list(t = x_obs,
X = sqrt(2) * sin(outer(pi * x_obs, seq_len(n_basis) - 0.5)))
pace_noise <- sigma * sum(lambda)
x_obs_bi <- expand.grid(y = x_obs,
x = x_obs)
cov_pace_rd <- pracma::interp2(x = x_cov,
y = x_cov,
Z = cov_pace,
xp = x_obs_bi[, 2],
yp = x_obs_bi[, 1]) |>
matrix(nrow = length(x_obs),
ncol = length(x_obs))
#
# Sigma_mat <- lapply(seq_len(n_basis),
#                     function(j) lambda[j] * tcrossprod(psi_list$X[, j])) |>
#   (\(x) Reduce('+', x))()
Sigma_mat <- cov_pace_rd + pace_noise * diag(nrow = nrow(cov_pace_rd),
ncol = ncol(cov_pace_rd))
pdf_list <- list(t = x_obs,
x = rep(1, length(x_obs)))
xi_hat <- mc_scores(y_list = y_list,
mu_list = mu_list,
psi_list = psi_list,
pdf_list = pdf_list,
cdf = cdf,
noise_sd = sigma)
ci_exact <- confint_mc(xi_hat, ci_level)
ci_lim <- confint_lim(xi_hat, pdf_list, ci_level)
xi_pace <- pace_scores(y_list, lambda, psi_list, Sigma_mat, mu_list)
ci_pace <- confint_pace(scores_vec = xi_pace,
lambda_vec = lambda,
phi_list = psi_list,
Sigma_mat = Sigma_mat,
conf_level = ci_level)
if(shift != 0) {
xi_true <- x_list$xi + shift * sqrt(2) / ((seq_len(n_basis) - 0.5) * pi)
} else {
xi_true <- x_list$xi
}
exact_count <- (xi_true >= ci_exact$ci_l) & (xi_true <= ci_exact$ci_u)
limit_count <- (xi_true >= ci_lim$ci_l) & (xi_true <= ci_lim$ci_u)
pace_count <- (xi_true >= ci_pace$ci_l) & (xi_true <= ci_pace$ci_u)
xi_int <- apply(psi_list$X, 2, function(x) pracma::trapz(x = psi_list$t,
y = x * y_list$y))
list(exact_count = exact_count,
lim_count = limit_count,
pace_count = pace_count,
width_exact = ci_exact$ci_u - ci_exact$ci_l,
width_lim = ci_lim$ci_u - ci_lim$ci_l,
width_pace = ci_pace$ci_u - ci_pace$ci_l,
mc_err = abs(xi_hat$xi_hat - xi_true),
bias_mc = xi_hat$xi_hat - xi_true,
bias_pace = xi_pace - xi_true,
pace_err = abs(xi_pace - xi_true),
riemann_err = abs(xi_int - xi_true),
bias_riemann = xi_int - xi_true,
xi_mc = xi_hat$xi_hat,
xi_pace = xi_pace,
xi_true = xi_true,
ci_exact = ci_exact,
ci_pace = ci_pace)
}, mc.cores = 5)
toc()
mc_err_mat <- t(sapply(result, function(r) r$mc_err[1:5]))
colnames(mc_err_mat) <- paste0("xi", seq_len(5))
pace_err_mat <- t(sapply(result, function(r) r$pace_err[1:5]))
colnames(pace_err_mat) <- paste0("xi", seq_len(5))
riemann_err_mat <- t(sapply(result, function(r) r$riemann_err[1:5]))
colnames(riemann_err_mat) <- paste0("xi", seq_len(5))
df1 <- as.data.frame(mc_err_mat)
df2 <- as.data.frame(pace_err_mat)
df3 <- as.data.frame(riemann_err_mat)
df1$Source <- "mc"
df2$Source <- "pace"
df3$Source <- "riemann"
combined_df <- rbind(df1, df2, df3)
melted_df <- melt(combined_df, id.vars = "Source")
ggplot(melted_df, aes(x = variable, y = value, fill = Source)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Boxplots for scores", x = "Scores", y = "MAE")
apply(mc_err_mat / riemann_err_mat, 2, median)
apply(mc_err_mat / pace_err_mat, 2, median)
lambda
x_obs <- sort(points_dist(n = x_length))
x_list <- bm_kl_rd(k = n_basis, x = x_obs, lambda_rate = lambda_pow,
norm_constant = 0, norm_factor = sqrt(1/2), xi_dist = xi_cdf,
df = 4)
lag <- 1
eta <- rnorm(length(x_list$x) + lag)
em <- RcppRoll::roll_sum(x = eta, n = lag + 1) / sqrt(lag + 1)
#noise <- x_list$x * sigma * em
noise <- sigma * em
y_list <- list(t = x_obs,
x = x_list$x,
y = x_list$x + noise + shift)
lambda <- ((seq_len(n_basis) - 0.5) * pi)^(-lambda_pow)
lambda
cumsum(lambda) / sum(lambda)
bias_mc <- t(sapply(result, function(r) r$bias_mc[1:5]))
colnames(bias_mc) <- paste0("xi", seq_len(5))
bias_pace <- t(sapply(result, function(r) r$bias_pace[1:5]))
colnames(bias_pace) <- paste0("xi", seq_len(5))
bias_riemann <- t(sapply(result, function(r) r$bias_riemann[1:5]))
colnames(bias_riemann) <- paste0("xi", seq_len(5))
df1 <- as.data.frame(bias_mc)
df2 <- as.data.frame(bias_pace)
df3 <- as.data.frame(bias_riemann)
# Add an identifier column to each data frame
df1$Source <- "mc"
df2$Source <- "pace"
df3$Source <- "riemann"
# Combine the two data frames
combined_df <- rbind(df1, df2, df3)
# Melt the combined data frame for ggplot2
melted_df <- melt(combined_df, id.vars = "Source")
# Create the boxplot
ggplot(melted_df, aes(x = variable, y = value, fill = Source)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Boxplots for scores", x = "Scores", y = "MAE")
# Check coverage ================================================================
exact_coverage <- Reduce('+', purrr::map(result, ~.x$exact_count))
lim_coverage <- Reduce('+', purrr::map(result, ~.x$lim_count))
pace_coverage <- Reduce('+', purrr::map(result, ~.x$pace_count))
exact_coverage
pace_coverage
bm_kl_rd
library(mcscores)
library(parallel)
library(tictoc)
library(reshape2)
library(tidyr)
library(ggplot2)
n_basis <- 200
lambda_pow <- 2
x_length <- 51
ci_level <- 0.95
xi_cdf <- rt
#xi_cdf <- rchisq
#xi_cdf <- rnorm
points_dist <- runif
#cdf <- function(x) a/3*(x - 0.5)^3 + b*x + a/24
cdf <- identity
rout <- 500
a <- 3
b <- 1 - a/12
shift <- 0
sigma <- 0.1
x_cov <- seq(0, 1, length.out = 201)
# Generate large sample of curves to construct "true" covariance matrix
cov_pace <- purrr::map(seq_len(1000),
~bm_kl_rd(k = n_basis, x = x_cov, lambda_rate = lambda_pow,
xi_dist = xi_cdf,
df = 4,
norm_constant = 0, norm_factor = sqrt(1/2))) |>
purrr::map(~tcrossprod(.x$x)) |>
(\(x) Reduce('+', x) / length(x))()
?bm_kl_rd
bm_kl_rd(k = 100, x = 0.5, lambda_rate = 2,
norm_constant = 0, norm_factor = sqrt(1/2),
xi_dist = rt, df = 4)
random_pts <- runif(1000)
random_pts
random_pts <- sort(runif(1000))
random_pts
test_list <- purrr::map(random_pts,
~bm_kl_rd(k = 100, x = .x, lambda_rate = 2,
norm_constant = 0, norm_factor = sqrt(1/2),
xi_dist = rt, df = 4))
test_list
eta <- purrr::map(seq_along(test_list),
~rnorm(n = 1))
eta
eta <- purrr::map_dbl(seq_along(test_list),
~rnorm(n = 1))
eta
eta <- purrr::map_dbl(seq_along(test_list),
~rnorm(n = 1 + lag))
lag
lag <- 1
eta <- purrr::map_dbl(seq_along(test_list),
~rnorm(n = 1 + lag))
eta <- purrr::map(seq_along(test_list),
~rnorm(n = 1 + lag))
eta
em <- purrr::map(eta,
RcppRoll::roll_sum(x = .x, n = lag + 1) / sqrt(lag + 1))
em <- purrr::map(eta,
~RcppRoll::roll_sum(x = .x, n = lag + 1) / sqrt(lag + 1))
em
em <- purrr::map_dbl(eta,
~RcppRoll::roll_sum(x = .x, n = lag + 1) / sqrt(lag + 1))
em
noise <- sigma * em
noise
test_list
test_list[[1]]$x
test_list <- purrr::map(random_pts,
~bm_kl_rd(k = 100, x = .x, lambda_rate = 2,
norm_constant = 0, norm_factor = sqrt(1/2),
xi_dist = rt, df = 4)$x)
test_list
test_list <- purrr::map_dbl(random_pts,
~bm_kl_rd(k = 100, x = .x, lambda_rate = 2,
norm_constant = 0, norm_factor = sqrt(1/2),
xi_dist = rt, df = 4)$x)
lag <- 1
eta <- purrr::map(seq_along(test_list),
~rnorm(n = 1 + lag))
em <- purrr::map_dbl(eta,
~RcppRoll::roll_sum(x = .x, n = lag + 1) / sqrt(lag + 1))
noise <- sigma * em
noisre
noise
noise <- sigma * em * test_list
noise
mean(noise^2)
mean(noise^2)
test_list
mean(sigma * em^2)
mean((sigma * em)^2)
mean(noise^2)
mean((sigma * em)^2)
sigma
random_pts
test_list
gc()
gc()
random_pts <- sort(runif(1000))
random_pts
test_list <- purrr::map_dbl(random_pts,
~bm_kl_rd(k = 100, x = .x, lambda_rate = 2,
norm_constant = 0, norm_factor = sqrt(1/2),
xi_dist = rt, df = 4)$x)
lag <- 1
eta <- purrr::map(seq_along(test_list),
~rnorm(n = 1 + lag))
em <- purrr::map_dbl(eta,
~RcppRoll::roll_sum(x = .x, n = lag + 1) / sqrt(lag + 1))
noise <- sigma * em * test_list
sigma <- 0.1
noise <- sigma * em * test_list
mean((sigma * em)^2)
mean(noise^2)
sigma <- 0.5
noise <- sigma * em * test_list
mean((sigma * em)^2)
mean(noise^2)
sigma_vec
random_pts <- sort(runif(1000))
test_list <- purrr::map_dbl(random_pts,
~bm_kl_rd(k = 100, x = .x, lambda_rate = 2,
norm_constant = 0, norm_factor = sqrt(1/2),
xi_dist = rt, df = 4)$x)
test_list
x_vec = test_list
lag <- 1
eta <- purrr::map(seq_along(test_list),
~rnorm(n = 1 + lag))
em <- purrr::map_dbl(eta,
~RcppRoll::roll_sum(x = .x, n = lag + 1) / sqrt(lag + 1))
sigma <- 0.5
noise <- sigma * em * test_list
mean(noise^2)
sigma^2 * sum(lambda)
y_list <- list(t = x_obs,
x = x_list$x,
y = x_list$x + noise + shift)
x_obs <- sort(points_dist(n = x_length))
library(mcscores)
library(parallel)
library(tictoc)
library(reshape2)
library(tidyr)
library(ggplot2)
n_basis <- 200
lambda_pow <- 2
x_length <- 51
ci_level <- 0.95
xi_cdf <- rt
#xi_cdf <- rchisq
#xi_cdf <- rnorm
points_dist <- runif
#cdf <- function(x) a/3*(x - 0.5)^3 + b*x + a/24
cdf <- identity
rout <- 500
a <- 3
b <- 1 - a/12
shift <- 0
sigma <- 0.1
x_cov <- seq(0, 1, length.out = 201)
# Generate large sample of curves to construct "true" covariance matrix
cov_pace <- purrr::map(seq_len(1000),
~bm_kl_rd(k = n_basis, x = x_cov, lambda_rate = lambda_pow,
xi_dist = xi_cdf,
df = 4,
norm_constant = 0, norm_factor = sqrt(1/2))) |>
purrr::map(~tcrossprod(.x$x)) |>
(\(x) Reduce('+', x) / length(x))()
x_obs <- sort(points_dist(n = x_length))
x_list <- bm_kl_rd(k = n_basis, x = x_obs, lambda_rate = lambda_pow,
norm_constant = 0, norm_factor = sqrt(1/2), xi_dist = xi_cdf,
df = 4)
lag <- 1
eta <- rnorm(length(x_list$x) + lag)
em <- RcppRoll::roll_sum(x = eta, n = lag + 1) / sqrt(lag + 1)
#noise <- x_list$x * sigma * em
noise <- sigma * em
y_list <- list(t = x_obs,
x = x_list$x,
y = x_list$x + noise + shift)
lambda <- ((seq_len(n_basis) - 0.5) * pi)^(-lambda_pow)
lambda
sum(lambda)
sigma^2 * sum(lambda)
mean(noise62)
mean(noise^2)
sigma * sum(lambda)
(sigma * sum(lambda))^2
x_vec
sigma_vec
lag <- 1
eta <- purrr::map(seq_along(test_list),
~rnorm(n = 1 + lag))
em <- purrr::map_dbl(eta,
~RcppRoll::roll_sum(x = .x, n = lag + 1) / sqrt(lag + 1))
sigma <- 0.5
noise <- sigma * em * test_list
sigma_vec
noise
sigma_vec = noise
f
f = identity
sigma_vec
f
x_vec
length(sigma_vec)
x_vec
plot(random_pts[[1]], x_vec, type = "l")
plot(test_list[[1]]$t, x_vec, type = "l")
test_list
plot(seq(0, 1, l = 1001), x_vec, type = "l")
length(x_vec)
plot(seq(0, 1, l = 1000), x_vec, type = "l")
sigma_vec
plot(sigma_vec)
noise
plot(noise)
plot(em)
x_vec
plot(x_vec)
sigma_vec = sigma*em
em
plot(em)
plot(em, type = "l")
test_list
eta
noise
sigma_vec
x_vec
f
noise <- sigma_vec * rnorm(n = length(sigma_vec)) * f(x_vec)
noise
plot(noise)
plot(noise^2)
plot(noise)
plot(noise, type = "l")
sigma_vec
plot(sigma_vec)
plot(x_vec)
mean(noise^2)
x_vec
t_vec
x_vec
x_vec^2
mean(noise^2)
sigma_vec
mean(noise^2)
bm_kl_rd(k = n_basis, x = x_obs, lambda_rate = lambda_pow,
norm_constant = 0, norm_factor = sqrt(1/2), xi_dist = xi_cdf,
df = 4)
bm_kl_rd(k = n_basis, x = x_obs, lambda_rate = lambda_pow,
norm_constant = 0, norm_factor = sqrt(1/2), xi_dist = xi_cdf,
df = 4)
x_obs
x_obs
sample(x_obs, 1)
cov_pace
image(cov_pace)
?points_dist
points_dist
runif
?runif
pacE_n
pace_n
# Parameters for PACE ==========================================================
# Generate large sample of curves to construct "true" covariance matrix
pace_n <- 1000
points_vec <- points_dist(n = pace_n)
points_vec
points_vec <- sort(points_dist(n = pace_n))
points_vec
points_vec[1]
points_vec[50]
pace_noise <- purrr::map(points_vec,
~bm_kl_rd(k = n_basis,
x = .x,
lambda_rate = lambda_pow,
norm_constant = 0,
norm_factor = sqrt(1/2),
xi_dist = xi_cdf,
df = 4))
pace_noise
pace_noise <- purrr::map(points_vec,
~bm_kl_rd(k = n_basis,
x = .x,
lambda_rate = lambda_pow,
norm_constant = 0,
norm_factor = sqrt(1/2),
xi_dist = xi_cdf,
df = 4)$x)
pace_noise
pace_noise <- purrr::map_dbl(points_vec,
~bm_kl_rd(k = n_basis,
x = .x,
lambda_rate = lambda_pow,
norm_constant = 0,
norm_factor = sqrt(1/2),
xi_dist = xi_cdf,
df = 4)$x)
pace_noise
noise_x
rm(pace_noise)
noise_x <- purrr::map_dbl(points_vec,
~bm_kl_rd(k = n_basis,
x = .x,
lambda_rate = lambda_pow,
norm_constant = 0,
norm_factor = sqrt(1/2),
xi_dist = xi_cdf,
df = 4)$x)
noise_x <- purrr::map_dbl(points_vec,
~bm_kl_rd(k = n_basis,
x = .x,
lambda_rate = lambda_pow,
norm_constant = 0,
norm_factor = sqrt(1/2),
xi_dist = xi_cdf,
df = 4)$x)
noise_x
pace_noise <- sigma * noise_x * rnorm(n = length(noise_x))
pace_noise
pace_noise <- mean((sigma * noise_x * rnorm(n = length(noise_x)))^2)
pace_noise
noise <- sigma * em * x_list$x
x_list$x
